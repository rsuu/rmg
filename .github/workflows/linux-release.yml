name: linux
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    name: (${{ matrix.target }}, ${{ matrix.cfg_release_channel }})
    env:
      CFG_RELEASE_CHANNEL: ${{ matrix.cfg_release_channel }}
    strategy:
      #max-parallel: 1
      fail-fast: false
      matrix:
        target: [
          x86_64-unknown-linux-gnu,
        ]
        cfg_release_channel: [nightly, stable]

    steps:
    - name: checkout
      uses: actions/checkout@v3

      # Run build
    - name: install rustup
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
        sh rustup-init.sh -y --default-toolchain none
        rustup target add ${{ matrix.target }}

    - name: Build and Test
      run: bash ./ci/build_linux_release.sh

    - name: Build archive
      shell: bash
      run: |
        cargo build --release
        mkdir linux_release
        cp target/release/rmg linux_release
        tar czf "$staging.tar.gz" linux_release
        echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
