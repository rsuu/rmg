# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

name: release

on:
  push:
    tags:
    - 'v*'

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      bin_version: ${{ env.BIN_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.BIN_VERSION == ''
        run: |
          echo "BIN_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.BIN_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BIN_VERSION }}
          release_name: ${{ env.BIN_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-22.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-12
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2022
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-2022
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-2022
          rust: nightly
          target: i686-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Add mingw64 to path for x86_64
        run: echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
        if: matrix.rust == 'nightly'
        shell: bash

      - name: Build
        shell: bash
        run: |
          export RUSTFLAGS="-Awarnings"
          cargo build --release

      - name: Build archive
        shell: bash
        run: |
          staging="rmg_${{ matrix.build }}_${{ needs.create-release.outputs.bin_version }}"
          mkdir -p "$staging"

          cp {README.md,LICENSE-MIT,LICENSE-APACHE2.0} "$staging/"

          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            cp target/release/rmg.exe "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp target/release/rmg "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
