name: release

on:
  push:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-release:
    name: build-release
    strategy:
      matrix:
        build: [linux-x86_64, macos-x86_64, windows-x86_64-gnu, windows-x86_64-msvc]
        include:
          - build: linux-x86_64
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
          - build: macos-x86_64
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: windows-x86_64-gnu
            os: windows-latest
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: windows-x86_64-msvc
            os: windows-latest
            rust: nightly-x86_64-msvc
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

        # Run build
      - name: install rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > rustup-init.sh
          sh rustup-init.sh -y --default-toolchain none
          rustup target add ${{ matrix.target }}

      - name: Add mingw64 to path for x86_64-gnu
        run: echo "C:\msys64\mingw64\bin" >> $GITHUB_PATH
        if: matrix.rust == 'nightly-x86_64-gnu'
        shell: bash

      - name: Build release binaries
        uses: actions-rs/cargo@v1
        run:
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
          elif [ "${{ matrix.os }}" = "mac-latest" ]; then
          else
            sudo apt-get -y install libsdl2-dev libsdl2-image-2.0-0 libsdl2-ttf-2.0-0 libsdl2-image-dev libsdl2-ttf-dev
            cargo build --release
          fi


      - name: Build archive
        shell: bash
        run: |
          staging="rustfmt_${{ matrix.build }}_${{ github.event.release.tag_name }}"
          mkdir -p "$staging"

          cp {README.md,LICENSE-MIT,LICENSE-APACHE} "$staging/"

          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/release/{rustfmt.exe,cargo-fmt.exe,rustfmt-format-diff.exe,git-rustfmt.exe} "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp target/release/{rustfmt,cargo-fmt,rustfmt-format-diff,git-rustfmt} "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream